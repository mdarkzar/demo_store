// Code generated by MockGen. DO NOT EDIT.
// Source: ../backend/internal/bridge/interface.go

// Package bridge is a generated GoMock package.
package bridge

import (
	reflect "reflect"
	transaction "store/internal/transaction"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDate is a mock of Date interface.
type MockDate struct {
	ctrl     *gomock.Controller
	recorder *MockDateMockRecorder
}

// MockDateMockRecorder is the mock recorder for MockDate.
type MockDateMockRecorder struct {
	mock *MockDate
}

// NewMockDate creates a new mock instance.
func NewMockDate(ctrl *gomock.Controller) *MockDate {
	mock := &MockDate{ctrl: ctrl}
	mock.recorder = &MockDateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDate) EXPECT() *MockDateMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockDate) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockDateMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockDate)(nil).Now))
}

// Today mocks base method.
func (m *MockDate) Today() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Today")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Today indicates an expected call of Today.
func (mr *MockDateMockRecorder) Today() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Today", reflect.TypeOf((*MockDate)(nil).Today))
}

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// SendAll mocks base method.
func (m *MockNotification) SendAll(ts transaction.Session, title, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAll", ts, title, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAll indicates an expected call of SendAll.
func (mr *MockNotificationMockRecorder) SendAll(ts, title, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAll", reflect.TypeOf((*MockNotification)(nil).SendAll), ts, title, message)
}

// SendUser mocks base method.
func (m *MockNotification) SendUser(ts transaction.Session, userID int, title, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUser", ts, userID, title, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUser indicates an expected call of SendUser.
func (mr *MockNotificationMockRecorder) SendUser(ts, userID, title, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUser", reflect.TypeOf((*MockNotification)(nil).SendUser), ts, userID, title, message)
}
