// Code generated by MockGen. DO NOT EDIT.
// Source: ../backend/internal/repository/interface.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	notification "store/internal/entity/notification"
	product "store/internal/entity/product"
	user "store/internal/entity/user"
	transaction "store/internal/transaction"

	gomock "github.com/golang/mock/gomock"
)

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProduct) Create(ts transaction.Session, userID int, name string, price float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ts, userID, name, price)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductMockRecorder) Create(ts, userID, name, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), ts, userID, name, price)
}

// FindByID mocks base method.
func (m *MockProduct) FindByID(ts transaction.Session, productID int) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ts, productID)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProductMockRecorder) FindByID(ts, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProduct)(nil).FindByID), ts, productID)
}

// LoadAll mocks base method.
func (m *MockProduct) LoadAll(ts transaction.Session) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll", ts)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockProductMockRecorder) LoadAll(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockProduct)(nil).LoadAll), ts)
}

// LoadStorageList mocks base method.
func (m *MockProduct) LoadStorageList(ts transaction.Session) ([]product.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStorageList", ts)
	ret0, _ := ret[0].([]product.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadStorageList indicates an expected call of LoadStorageList.
func (mr *MockProductMockRecorder) LoadStorageList(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStorageList", reflect.TypeOf((*MockProduct)(nil).LoadStorageList), ts)
}

// Remove mocks base method.
func (m *MockProduct) Remove(ts transaction.Session, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ts, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockProductMockRecorder) Remove(ts, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockProduct)(nil).Remove), ts, productID)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(ts transaction.Session, login, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ts, login, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ts, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ts, login, password)
}

// FindByID mocks base method.
func (m *MockUser) FindByID(ts transaction.Session, userID int) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ts, userID)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserMockRecorder) FindByID(ts, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUser)(nil).FindByID), ts, userID)
}

// FindByLogin mocks base method.
func (m *MockUser) FindByLogin(ts transaction.Session, login string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", ts, login)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLogin indicates an expected call of FindByLogin.
func (mr *MockUserMockRecorder) FindByLogin(ts, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockUser)(nil).FindByLogin), ts, login)
}

// LoadAll mocks base method.
func (m *MockUser) LoadAll(ts transaction.Session) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll", ts)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockUserMockRecorder) LoadAll(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockUser)(nil).LoadAll), ts)
}

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserCache) Add(userID int, user user.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", userID, user)
}

// Add indicates an expected call of Add.
func (mr *MockUserCacheMockRecorder) Add(userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserCache)(nil).Add), userID, user)
}

// Get mocks base method.
func (m *MockUserCache) Get(userID int) (user.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserCacheMockRecorder) Get(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserCache)(nil).Get), userID)
}

// Remove mocks base method.
func (m *MockUserCache) Remove(userID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", userID)
}

// Remove indicates an expected call of Remove.
func (mr *MockUserCacheMockRecorder) Remove(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUserCache)(nil).Remove), userID)
}

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotification) Create(ts transaction.Session, title, message string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ts, title, message)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNotificationMockRecorder) Create(ts, title, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotification)(nil).Create), ts, title, message)
}

// CreateUserMessage mocks base method.
func (m *MockNotification) CreateUserMessage(ts transaction.Session, userID, messageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserMessage", ts, userID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserMessage indicates an expected call of CreateUserMessage.
func (mr *MockNotificationMockRecorder) CreateUserMessage(ts, userID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserMessage", reflect.TypeOf((*MockNotification)(nil).CreateUserMessage), ts, userID, messageID)
}

// Delete mocks base method.
func (m *MockNotification) Delete(ts transaction.Session, nID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ts, nID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationMockRecorder) Delete(ts, nID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotification)(nil).Delete), ts, nID, userID)
}

// FindUserMessages mocks base method.
func (m *MockNotification) FindUserMessages(ts transaction.Session, userID int) ([]notification.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserMessages", ts, userID)
	ret0, _ := ret[0].([]notification.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserMessages indicates an expected call of FindUserMessages.
func (mr *MockNotificationMockRecorder) FindUserMessages(ts, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserMessages", reflect.TypeOf((*MockNotification)(nil).FindUserMessages), ts, userID)
}
